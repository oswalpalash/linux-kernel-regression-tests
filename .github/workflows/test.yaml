name: Run Tests in QEMU VM

on: [push, pull_request]

jobs:
  test-in-qemu:
    runs-on: ubuntu-latest

    steps:
    - name: Clean disk
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo docker rmi $(docker image ls -aq) || true
        sudo swapoff /swapfile || true
        sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc  || true
        sudo apt purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
          clang-6.0 lldb-6.0 lld-6.0 clang-format-6.0 clang-8 lldb-8 lld-8 clang-format-8 \
          clang-9 lldb-9 lld-9 clangd-9 clang-format-9 dotnet-sdk-3.0 dotnet-sdk-3.1=3.1.101-1 \
          esl-erlang firefox g++-8 g++-9 gfortran-8 gfortran-9 google-chrome-stable \
          google-cloud-sdk ghc-8.0.2 ghc-8.2.2 ghc-8.4.4 ghc-8.6.2 ghc-8.6.3 ghc-8.6.4 \
          ghc-8.6.5 ghc-8.8.1 ghc-8.8.2 ghc-8.8.3 ghc-8.10.1 cabal-install-2.0 cabal-install-2.2 \
          cabal-install-2.4 cabal-install-3.0 cabal-install-3.2 heroku imagemagick \
          libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
          mercurial apt-transport-https mono-complete mysql-client libmysqlclient-dev \
          mysql-server mssql-tools unixodbc-dev yarn bazel chrpath libssl-dev libxft-dev \
          libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev php7.1 php7.1-bcmath \
          php7.1-bz2 php7.1-cgi php7.1-cli php7.1-common php7.1-curl php7.1-dba php7.1-dev \
          php7.1-enchant php7.1-fpm php7.1-gd php7.1-gmp php7.1-imap php7.1-interbase php7.1-intl \
          php7.1-json php7.1-ldap php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-odbc \
          php7.1-opcache php7.1-pgsql php7.1-phpdbg php7.1-pspell php7.1-readline php7.1-recode \
          php7.1-snmp php7.1-soap php7.1-sqlite3 php7.1-sybase php7.1-tidy php7.1-xml \
          php7.1-xmlrpc php7.1-xsl php7.1-zip php7.2 php7.2-bcmath php7.2-bz2 php7.2-cgi \
          php7.2-cli php7.2-common php7.2-curl php7.2-dba php7.2-dev php7.2-enchant php7.2-fpm \
          php7.2-gd php7.2-gmp php7.2-imap php7.2-interbase php7.2-intl php7.2-json php7.2-ldap \
          php7.2-mbstring php7.2-mysql php7.2-odbc php7.2-opcache php7.2-pgsql php7.2-phpdbg \
          php7.2-pspell php7.2-readline php7.2-recode php7.2-snmp php7.2-soap php7.2-sqlite3 \
          php7.2-sybase php7.2-tidy php7.2-xml php7.2-xmlrpc php7.2-xsl php7.2-zip php7.3 \
          php7.3-bcmath php7.3-bz2 php7.3-cgi php7.3-cli php7.3-common php7.3-curl php7.3-dba \
          php7.3-dev php7.3-enchant php7.3-fpm php7.3-gd php7.3-gmp php7.3-imap php7.3-interbase \
          php7.3-intl php7.3-json php7.3-ldap php7.3-mbstring php7.3-mysql php7.3-odbc \
          php7.3-opcache php7.3-pgsql php7.3-phpdbg php7.3-pspell php7.3-readline php7.3-recode \
          php7.3-snmp php7.3-soap php7.3-sqlite3 php7.3-sybase php7.3-tidy php7.3-xml \
          php7.3-xmlrpc php7.3-xsl php7.3-zip php7.4 php7.4-bcmath php7.4-bz2 php7.4-cgi \
          php7.4-cli php7.4-common php7.4-curl php7.4-dba php7.4-dev php7.4-enchant php7.4-fpm \
          php7.4-gd php7.4-gmp php7.4-imap php7.4-interbase php7.4-intl php7.4-json php7.4-ldap \
          php7.4-mbstring php7.4-mysql php7.4-odbc php7.4-opcache php7.4-pgsql php7.4-phpdbg \
          php7.4-pspell php7.4-readline php7.4-snmp php7.4-soap php7.4-sqlite3 php7.4-sybase \
          php7.4-tidy php7.4-xml php7.4-xmlrpc php7.4-xsl php7.4-zip php-amqp php-apcu \
          php-igbinary php-memcache php-memcached php-mongodb php-redis php-xdebug \
          php-zmq snmp pollinate libpq-dev postgresql-client powershell ruby-full \
          sphinxsearch subversion mongodb-org -yq >/dev/null 2>&1 || true
        sudo apt-get autoremove -y >/dev/null 2>&1 || true
        sudo apt-get autoclean -y >/dev/null 2>&1 || true
    - uses: actions/checkout@v4

    - name: Install QEMU and Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu qemu-kvm cloud-image-utils sshpass

    - name: Generate SSH Key for VM Access
      run: |
        ssh-keygen -t rsa -b 4096 -f "${{ github.workspace }}/ssh_key" -q -N ""
        echo "SSH_KEY=${{ github.workspace }}/ssh_key" >> $GITHUB_ENV

    - name: Prepare Cloud-Init Configuration for VM
      run: |
        echo "#cloud-config" > user-data
        echo "ssh_authorized_keys:" >> user-data
        echo "  - $(cat ${{ github.workspace }}/ssh_key.pub)" >> user-data
        cloud-localds user-data.img user-data

    - name: Download Ubuntu Server VM Image
      run: |
        wget https://cloud-images.ubuntu.com/releases/focal/release/ubuntu-20.04-server-cloudimg-amd64.img

    - name: Start QEMU VM and run tests
      run: |
        TEMP_SERIAL_LOG=$(mktemp)
        qemu-system-x86_64 \
          -m 1024 \
          -smp 2 \
          -drive file=ubuntu-20.04-server-cloudimg-amd64.img,format=qcow2 \
          -drive file=user-data.img,format=raw \
          -net user,hostfwd=tcp::2222-:22 \
          -net nic \
          -fsdev local,id=fsdev0,path=${{ github.workspace }},security_model=mapped-file \
          -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare \
          -serial file:$TEMP_SERIAL_LOG \
          -display none \
          -daemonize
        sleep 100  # Adjust as necessary to ensure the VM is fully booted
        chmod 600 ${{ github.workspace }}/ssh_key
        SSH_KEY_FILE="${{ github.workspace }}/ssh_key"
        SSH_CMD="ssh -i $SSH_KEY -o StrictHostKeyChecking=no -p 2222 ubuntu@localhost"
        for i in {1..5}; do
          $SSH_CMD 'echo "SSH connection successful"' && break || sleep 10
        done
        # Ensure the SSH key is secure and log in to the VM
        $SSH_CMD 'sudo mkdir /mnt/hostshare && sudo mount -t 9p -o trans=virtio,version=9p2000.L hostshare /mnt/hostshare'
        # Execute each test file in the compiled directory of the repo
        $SSH_CMD 'for test_file in /mnt/hostshare/compiled/*; do echo Running $test_file; timeout 5s $test_file || exit 1; done'

    - name: Display QEMU Serial Output
      if: always() # Ensure this step runs even if previous steps fail
      run: |
        if [ -f "$TEMP_SERIAL_LOG" ]; then
          echo "QEMU Serial Output:"
          cat "$TEMP_SERIAL_LOG"
        fi
